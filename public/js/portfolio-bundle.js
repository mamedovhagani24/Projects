!function(e){var t={};function n(a){if(t[a])return t[a].exports;var i=t[a]={i:a,l:!1,exports:{}};return e[a].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:a})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var a=Object.create(null);if(n.r(a),Object.defineProperty(a,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(a,i,function(t){return e[t]}.bind(null,i));return a},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=6)}([function(e,t,n){},function(e,t){window.addEventListener("scroll",(function(){var e=document.querySelector(".header");window.pageYOffset>200&&!e.classList.contains("header-mobile_open")?e.classList.add("header__small"):e.classList.remove("header__small")}));document.querySelector(".burger").addEventListener("click",(function(e){var t=document.querySelector(".header");e.preventDefault(),this.classList.toggle("active"),t.classList.toggle("header-mobile_open")}));function n(e){e.target.classList.contains("nav__submenu")&&this.classList.toggle("submenu_active")}document.querySelectorAll(".submenu").forEach((function(e){e.addEventListener("click",n)}))},,function(e,t,n){"use strict";var a=new(n(4))(firebase),i=document.querySelector(".cases"),o=document.querySelector(".pagination"),r={activeTag:"all",activePagination:0,elements:[]};function c(){var e;u(),e=r.elements.reduce((function(e,t,n){return e+'<a href="#" data-page="'.concat(a=n,'">\n  <div class="pagination__item ').concat(a===r.activePagination?"page-active":"",'">').concat(a+1,"</div>\n</a>");var a}),""),o.innerHTML=e}function s(e){var t=0;r.elements=e.reduce((function(e,n){var a;return e[t]=null!==(a=e[t])&&void 0!==a?a:[],e[t].length<4?e[t].push(n):e[++t]=[n],e}),[]),l()}function l(){var e,t=null!==(e=r.activePagination)&&void 0!==e?e:0;(function(e){i.innerHTML=e})(r.elements[t].reduce((function(e,t){return e+'<div class="cases__item">\n  <div class="cases__item__img">\n      <img class="img-inner" src="'.concat((n=t).imgURL,'">\n  </div>\n  <div class="cases__item__info">\n      <div class="text-content">\n          <h3 class="title-h3">').concat(n.id," â€¢ ").concat(n.title,'</h3>\n          <p class="description">').concat(n.description,'</p>\n      </div>\n      <div class="links">\n          <div class="links__link">\n              <a class="links__link__url" href="https://').concat(n.link,'">\n                  <div class="link-img"></div><span>').concat(n.link,'</span>\n              </a>\n          </div>\n          <button class="btn btn_large">view details</button>\n      </div>\n  </div>\n</div>');var n}),"")),c(),document.querySelectorAll(".pagination a").forEach((function(e){e.addEventListener("click",f)}))}function u(){document.querySelectorAll(".filters button").forEach((function(e){e.getAttribute("data-name")===r.activeTag?e.classList.add("selected"):e.classList.remove("selected")}))}function d(){r.activeTag=this.getAttribute("data-name"),r.activePagination=0,"all"===r.activeTag?a.loadPosts().then(s).catch((function(e){return console.log(e)})):a.loadPostsByTag(r.activeTag).then(s).catch((function(e){return console.log(e)})),u(r.activeTag)}function f(){r.activePagination=+this.getAttribute("data-page"),l()}a.loadPosts().then(s).catch((function(e){return console.error(e)})),document.querySelectorAll(".filters button").forEach((function(e){e.addEventListener("click",d)}))},function(e,t){function n(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var i={apiKey:"AIzaSyCnsSVyoVBqj_MLsjm27IN8rawZ7A6Y8eY",authDomain:"modusversus-project.firebaseapp.com",projectId:"modusversus-project",storageBucket:"modusversus-project.appspot.com",messagingSenderId:"295123108152",appId:"1:295123108152:web:5b08fb1d9576c1a5ecc1cd"};e.exports=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),a(this,"_database",void 0),a(this,"_firebase",void 0),a(this,"_config",i),this.init(t),this.length=null}var t,o,r;return t=e,(o=[{key:"init",value:function(e){this._firebase=e.initializeApp(i),this._database=this._firebase.database(),this.setLength()}},{key:"loadPosts",value:function(){return this._database.ref("/portfolio-2/").orderByChild("title").get().then((function(e){return Object.values(e.val())}))}},{key:"loadPostsByTag",value:function(e){return this._database.ref("/portfolio-2/").orderByChild("tags/"+e).equalTo(!0).once("value").then((function(e){return Object.values(e.val())}))}},{key:"setLength",value:function(){var e=this;this._database.ref("/portfolio-2/").limitToLast(1).get().then((function(t){e.length=+Object.keys(t.val())[0]+1})).catch((function(e){return console.error(e)}))}}])&&n(t.prototype,o),r&&n(t,r),e}()},,function(e,t,n){"use strict";n.r(t);n(0),n(1),n(3),n.p,n.p,n.p}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,